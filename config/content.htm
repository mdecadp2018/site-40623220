<h1>簡介</h1>
<p>倉儲:<a href="https://github.com/mdecadp2018/site-40623220">https://github.com/mdecadp2018/site-40623220</a></p>
<p>網站:<a href="https://mdecadp2018.github.io/site-40623220" rel="nofollow">https://mdecadp2018.github.io/site-40623220</a></p>
<p>投影片:<a href="https://mdecadp2018.github.io/site-40623220/reveal/" rel="nofollow">https://mdecadp2018.github.io/site-40623220/reveal/</a></p>
<p>分組倉儲:<span>:</span><a href="https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g2">https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g2</a></p>
<p>分組網站:<a href="https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g2/content/index.html" rel="nofollow">https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g2/content/index.html</a></p>
<p></p>
<h1>進度</h1>
<h2>bubbleRob</h2>
<p>操作影片</p>
<p><a href="https://www.youtube.com/watch?v=6dXxwv2VwQM">bubbleRob-1</a></p>
<p><a href="https://www.youtube.com/watch?v=T7F8YRm2Tvc&amp;t=4s">bubbleRob-2</a></p>
<p><a href="https://www.youtube.com/watch?v=x1iKmc80sXU&amp;t=12s">bubbleRob-3</a></p>
<p><a href="https://www.youtube.com/watch?v=2JOugIqSqhc&amp;feature=youtu.be">bubbleRob-4</a></p>
<p></p>
<h2>手足球</h2>
<p>人對人</p>
<p><a href="https://www.youtube.com/watch?v=2Ufj8QCsgBw">模擬-1</a></p>
<p><a href="https://www.youtube.com/watch?v=f8z_zP6t47k">模擬-2</a></p>
<p><a href="https://www.youtube.com/watch?v=6kT7aJPt-qc">模擬-3</a></p>
<p><a href="https://www.youtube.com/watch?v=l1hvV8XJS6Y&amp;feature=youtu.be">模擬-4</a></p>
<p><a href="https://www.youtube.com/watch?v=ocVKuLKiTPc&amp;feature=youtu.be">模擬-5</a></p>
<p><a href="https://github.com/mdecadp2018/site-40623220/blob/gh-pages/bg2.ttt">v-rep檔案</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">-- model in Solvespace 500 mm = 5000 mm in V-rep
--[[
Simulation is 10 times of realistic environment
floor in Solvespace 2.5 m x 2.5 m = 25 m x 25 m in V-rep
ball is in Solivespace 1g (0.001) = 0.01 kg in V-rep
hammer is in Solvespace 0.1 kg (100g) = 1kg in V-rep (0.1 for Inertia)
]]
local joint_r = {'left_joint1','left_joint3','left_joint5','left_joint7',}
local joint_b = {'left_joint','left_joint2','left_joint4','left_joint6',}
local slider_r ={'left_slider1','left_slider3','left_slider5','left_slider7',}
local slider_b ={'left_slider','left_slider2','left_slider4','left_slider6',}
threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
key=auxiliaryData[1]
sim.addStatusbarMessage('key:'..key)
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==2007)or(auxiliaryData[1]==119) then
                    -- up key
                if  (auxiliaryData[1]==119)then
                    joint_all_c1=sim.getObjectHandle(joint_r[1])
                    joint_all_c2=sim.getObjectHandle(joint_r[2])  
                    joint_all_c3=sim.getObjectHandle(joint_r[3])
                    joint_all_c4=sim.getObjectHandle(joint_r[4])             
                else
                    joint_all_c1=sim.getObjectHandle(joint_b[1])
                    joint_all_c2=sim.getObjectHandle(joint_b[2])
                    joint_all_c3=sim.getObjectHandle(joint_b[3])
                    joint_all_c4=sim.getObjectHandle(joint_b[4])    
                end
                    velocity=100
                    torque=200
                    hammer_back = 0
end
                if (auxiliaryData[1]==2008) or (auxiliaryData[1]==115) then
                    -- down key
                if  (auxiliaryData[1]==115)then
                    joint_all_c1=sim.getObjectHandle(joint_r[1])
                    joint_all_c2=sim.getObjectHandle(joint_r[2])  
                    joint_all_c3=sim.getObjectHandle(joint_r[3])
                    joint_all_c4=sim.getObjectHandle(joint_r[4])  
                else
                    joint_all_c1=sim.getObjectHandle(joint_b[1])
                    joint_all_c2=sim.getObjectHandle(joint_b[2])
                    joint_all_c3=sim.getObjectHandle(joint_b[3])
                    joint_all_c4=sim.getObjectHandle(joint_b[4])
                end
                     hammer_back = 1
                     torque=-200
                     velocity = -100
end
                if (auxiliaryData[1]==2009) or (auxiliaryData[1]==100) then
                    -- right key 
                
                if  (auxiliaryData[1]==100)then
                if (sliding_r&gt;=0.3)then else sliding_r = sliding_r + 0.05 end  
sim.addStatusbarMessage('sliding_r:'..sliding_r)
                else
                if (sliding_b&gt;=0.3)then else sliding_b = sliding_b + 0.05 end
sim.addStatusbarMessage('sliding_b:'..sliding_b)
                end

                
                end
                if (auxiliaryData[1]==2010) or (auxiliaryData[1]==97) then
                    -- left key
                if  (auxiliaryData[1]==97)then
                if (sliding_r&lt;=-0.3)then else sliding_r = sliding_r - 0.05 end
                    
sim.addStatusbarMessage('sliding_r:'..sliding_r)
                else
                if (sliding_b&lt;=-0.3)then else sliding_b = sliding_b - 0.05 end
sim.addStatusbarMessage('sliding_b:'..sliding_b)
                end
                end
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then 
        sim.setJointTargetPosition(joint_all_c1, velocity)
        sim.setJointTargetPosition(joint_all_c2, velocity)
        sim.setJointTargetPosition(joint_all_c3, velocity)
        sim.setJointTargetPosition(joint_all_c4, velocity)
               --sim.setObjectPosition(hammer, -1, position)
        end
        sim.setJointTargetPosition(joint_all_c1, velocity)
        sim.setJointTargetPosition(joint_all_c2, velocity)
        sim.setJointTargetPosition(joint_all_c3, velocity)
        sim.setJointTargetPosition(joint_all_c4, velocity)

        --sim.setJointForce(joint,torque)
        sim.setJointTargetPosition(slider_r_c1, sliding_r)
        sim.setJointTargetPosition(slider_r_c2, sliding_r)
        sim.setJointTargetPosition(slider_r_c3, sliding_r)
        sim.setJointTargetPosition(slider_r_c4, sliding_r)
        sim.setJointTargetPosition(slider_b_c1, sliding_b)
        sim.setJointTargetPosition(slider_b_c2, sliding_b)
        sim.setJointTargetPosition(slider_b_c3, sliding_b)
        sim.setJointTargetPosition(slider_b_c4, sliding_b)
        --Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:

joint_all_c1=sim.getObjectHandle(joint_r[1])
joint_all_c2=sim.getObjectHandle(joint_r[2])
joint_all_c3=sim.getObjectHandle(joint_r[3])
joint_all_c4=sim.getObjectHandle(joint_r[4])

slider_r_c1=sim.getObjectHandle(slider_r[1])
slider_r_c2=sim.getObjectHandle(slider_r[2])  
slider_r_c3=sim.getObjectHandle(slider_r[3])
slider_r_c4=sim.getObjectHandle(slider_r[4])

slider_b_c1=sim.getObjectHandle(slider_b[1])
slider_b_c2=sim.getObjectHandle(slider_b[2])  
slider_b_c3=sim.getObjectHandle(slider_b[3])
slider_b_c4=sim.getObjectHandle(slider_b[4]) 

hammer=sim.getObjectHandle('player')
velocity=0
hammer_back=0
torque=0
sliding_r = 0
sliding_b = 0
orientation=sim.getJointPosition(joint_all_c1, -1)
position=sim.getObjectPosition(hammer, -1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:</pre>
<p></p>
<h1>期末影片</h1>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2RiifI04vg4" width="560"></iframe></p>